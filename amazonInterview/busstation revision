Q: There is a bus station. tell me how many min number of bus lanes will be there if there is scheduledId (unique), inTime of bus, outTime of bus already given.

sol1:
const numOfRows = (arr) => {
  let arrofYtains = []
  let max = 0
  let activebus = 0
  for (i = 0; i < arr.length; i++) {
    arrofYtains.push({ time: arr[i].inTime, type: "arrive" })
    arrofYtains.push({ time: arr[i].outTime, type: "depart" })
  }

  //sort
  arrofYtains.sort((a, b) => {
    if (a.time == b.time) {
      return a.type == "arrive" ? 1 : -1
    }
    return a.time - b.time
  })

  for (i = 0; i < arrofYtains.length; i++) {
    if (arrofYtains[i].type == "arrive") {
      activebus++
      max = Math.max(activebus, max)
    } else activebus--
  }
  console.log(max)
}
numOfRows([
  { scheduledId: 1, inTime: 9.0, outTime: 9.3 },
  { scheduledId: 2, inTime: 9.4, outTime: 10.3 },
  { scheduledId: 3, inTime: 9.1, outTime: 11.4 },
  { scheduledId: 4, inTime: 10.2, outTime: 11.3 },
])

////////////////////////////
function minBusLanes(buses) {
  const arrivals = buses.map(b => b.inTime).sort((a, b) => a - b);
  const departures = buses.map(b => b.outTime).sort((a, b) => a - b);

  let lanesNeeded = 0;
  let maxLanes = 0;
  let i = 0, j = 0;

  while (i < arrivals.length) {
    if (arrivals[i] < departures[j]) {
      // Need a new lane
      lanesNeeded++;
      i++;
    } else {
      // A lane is freed
      lanesNeeded--;
      j++;
    }

    maxLanes = Math.max(maxLanes, lanesNeeded);
  }

  return maxLanes;
}

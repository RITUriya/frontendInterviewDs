//34. Find First and Last Position of Element in Sorted Array ===Medium
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
//sol1:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function (nums, target) {
    let l = 0
    let h = nums.length - 1
    if (nums.length == 1 && nums[0] == target) return [0, 0]
    while (l <= h) {
        let mid = Math.floor((l + h) / 2)
        console.log(mid)

        if (nums[mid] > target) {
            h = mid - 1
        } else if (nums[mid] < target) {
            l = mid + 1
        } else if (nums[mid] == target) {
            let start = mid
            let end = mid
            while (start > 0 && nums[start - 1] === target) start--
            while (end < nums.length - 1 && nums[end + 1] == target) end++
            return [start, end]
        }
    }
    return [-1, -1]
}

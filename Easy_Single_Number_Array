## https://seanprashad.com/leetcode-patterns/
#4.136. Single Number


Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]

Output: 1

Example 2:

Input: nums = [4,1,2,1,2]

Output: 4

Example 3:

Input: nums = [1]

Output: 1

 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

///////////////////////////////////////////////////////////////////////////

const singleNumber = (nums) => {
  const numsArray = nums.sort((a, b) => a - b)

  for (i = 0; i < numsArray.length; i += 2) {
    if (numsArray[i] != numsArray[i + 1]) return console.log(numsArray[i])
  }
}
singleNumber([2, 2, 1])
singleNumber([4, 1, 2, 1, 2])
singleNumber([4, 1, 2, 1, 2,4,3,5,5])

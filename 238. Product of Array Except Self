238. Product of Array Except Self
Medium
Topics
premium lock icon
Companies
Hint
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


sol1:
/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function (nums) {
  let product = 1;
  let arrayproduct = [];
  let zerocount = 0;
  for (i = 0; i < nums.length; i++) {
    if (nums[i] == 0) {
      zerocount++;
    } else {
      product = product * nums[i];
    }
  }
  for (i = 0; i < nums.length; i++) {
    if (zerocount > 1) {
      arrayproduct.push(0);
    } else if (zerocount == 1) {
      arrayproduct.push(nums[i] === 0 ? product : 0);
    } else arrayproduct.push(product / nums[i]);
  }
  return arrayproduct;
};
productExceptSelf([1, 2, 3, 4]);
productExceptSelf([-1, 1, 0, -3, 3]);


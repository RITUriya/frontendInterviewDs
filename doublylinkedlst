doublylinkedlist

class Node {
  constructor(data) {
    this.data = data;
    this.prev = null;
    this.next = null;
  }
}

class DoublyLinkedList {
  constructor() {
    this.head = null;
    this.tail = null;
    this.size = 0;
  }

  // Add a node to the end of the list
  append(data) {
    const newNode = new Node(data);
    if (!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      newNode.prev = this.tail;
      this.tail.next = newNode;
      this.tail = newNode;
    }
    this.size++;
  }

  // Add a node to the beginning of the list
  prepend(data) {
    const newNode = new Node(data);
    if (!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      newNode.next = this.head;
      this.head.prev = newNode;
      this.head = newNode;
    }
    this.size++;
  }

  // Insert a node at a specific index
  insertAt(data, index) {
    if (index < 0 || index > this.size) {
      return; // Invalid index
    }
    if (index === 0) {
      this.prepend(data);
    } else if (index === this.size) {
      this.append(data);
    } else {
      const newNode = new Node(data);
      let current = this.head;
      for (let i = 0; i < index - 1; i++) {
        current = current.next;
      }
      newNode.next = current.next;
      newNode.prev = current;
      current.next.prev = newNode;
      current.next = newNode;
      this.size++;
    }
  }

  // Remove a node from the end of the list
  pop() {
    if (!this.head) {
      return null;
    }
    const removedNode = this.tail;
    if (this.size === 1) {
      this.head = null;
      this.tail = null;
    } else {
      this.tail = this.tail.prev;
      this.tail.next = null;
    }
    this.size--;
    return removedNode.data;
  }

  // Remove a node from the beginning of the list
  shift() {
    if (!this.head) {
      return null;
    }
    const removedNode = this.head;
    if (this.size === 1) {
      this.head = null;
      this.tail = null;
    } else {
      this.head = this.head.next;
      this.head.prev = null;
    }
    this.size--;
    return removedNode.data;
  }

  // Remove a node at a specific index
  removeAt(index) {
    if (index < 0 || index >= this.size) {
      return null; // Invalid index
    }
    if (index === 0) {
      return this.shift();
    } else if (index === this.size - 1) {
      return this.pop();
    } else {
      let current = this.head;
      for (let i = 0; i < index; i++) {
        current = current.next;
      }
      current.prev.next = current.next;
      current.next.prev = current.prev;
      this.size--;
      return current.data;
    }
  }
  
    // Get the value of a node at a specific index
    get(index) {
        if (index < 0 || index >= this.size) {
            return null; // Invalid index
        }
        let current = this.head;
        for (let i = 0; i < index; i++) {
            current = current.next;
        }
        return current.data;
    }

  // Get the size of the list
  getSize() {
    return this.size;
  }

  // Clear the list
  clear() {
      this.head = null;
      this.tail = null;
      this.size = 0;
  }
}
